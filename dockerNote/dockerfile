#使用dockerfile定制镜像

#使用的源镜像
#FROM nginx

# RUN 执行shell命令
# RUN echo '---' 

#RUN ["可执行文件", "参数1", "参数2"]
# 例如：
# RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline

#表示创建镜像，和镜像版本
# docker build -t nginx:test


#COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>
#COPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]

# CMD 命令类似于RUN，CMD在docker run时运行。RUN时在docker build时。

#CMD <shell 命令> 
#CMD ["<可执行文件或命令>","<param1>","<param2>",...] 
#CMD ["<param1>","<param2>",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数

# ENTRYPOINT 类似于CMD指令，但是其不会被docker run的命令行参数指定的指令覆盖
# ENTRYPOINT ["<executeable>","<param1>","<param2>",...]

#可以和CMD搭配使用，事例如下：
# FROM nginx

# ENTRYPOINT ["nginx", "-c"] # 定参
# CMD ["/etc/nginx/nginx.conf"] # 变参 

#设置环境变量
#ENV <key> <value>
#ENV <key1>=<value1> <key2>=<value2>...


#构建时的参数
#ARG <参数名>[=<默认值>]

#数据卷挂载
#VOLUME ["<路径1>", "<路径2>"...]
#VOLUME <路径>

#端口对外声明或者映射
#EXPOSE <端口1> [<端口2>...]

#指定工作目录
#WORKDIR <工作目录路径>

#指定执行后的用户和用户组
#USER <用户名>[:<用户组>]


#用于延迟构建命令执行
#ONBUILD <其它指令>